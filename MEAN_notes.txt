Notes from the MEAN book
========================


CH1
---


CH2
---


CH3
---


CH4
---
Many functions have 'Sync' appended to the name:
fs.readFile(...) vs. fs.readFileSync(...)
asynchronous     vs.  synchronous
Asynchrouous calls aren't wrapped with try..catch, error is passed back to callback function to be handled.  

Synchronous calls need try...catch [used with functions like JSON.parse()]



CH5
---
Reading arguments from command line, via process.argv array
first 2 arguments are executable followed by the name of the invoked JS file
actual application arguments begin at process.argv[2]

fileRead() - returns a Buffer object
you can either use .toString() to convert to string
or specify 'utf8' (or other encoding) to return readable data

writeFile() - defaults to utf8 encoding 
wx flag causes error if file already exists
a flag causes data to append to file  (doesn't add new line)
http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback

for more info on generic TCP/IP programming for Node:
http://nodejs.org/api/net.html


HTTP server
-----------
'createServer()' executed callback for each request from the client
'req' argument contains info about the client and requestd resource
'res' argument contains info and methods regarding the response.

'writeHead()' method writes status code and options to the headers. 
'res.end()' MANDATORY call that is required to complete the connection
'res.end()' supports taking the same arguments as 'res.write()'
This means the entire response can be written via the 'res.end()'

Routes
------
perform different actions based on the request method and URL
combo of HTTP verb and requested URL is known as a route


CH6
---
common practice to execute the callback function on error and 'bubble the error back up to the calling function

In Node, the common callback convention is that the first argument to a callback function should be the error object, or null if there were no errors.  
